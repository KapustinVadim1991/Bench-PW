@using WebComponents.Enums
@using WebComponents.Utility
@namespace WebComponents.Components

<button type="@Type" class="@BtnClass" @onclick="OnClickEvent" disabled="@(Disabled || IsLoading)">
    @Text
    <div class="loader"></div>
</button>

@code {
    private string LoaderVisibleClass => new CssBuilder()
        .AddClass("loader-visible", IsLoading)
        .Build();

    private string BtnClass => new CssBuilder("btn")
        .AddClass(ColorClass)
        .AddClass(LoaderVisibleClass, IsLoading)
        .AddClass(Class!, !string.IsNullOrEmpty(Class))
        .Build();

    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public Color Color { get; set; } = Color.Primary;

    private string ColorClass => Color switch {
        Color.Primary   => "btn-primary",
        Color.Secondary => "btn-secondary",
        Color.Success   => "btn-success",
        Color.Danger    => "btn-danger",
        Color.Warning   => "btn-warning",
        Color.Info      => "btn-info",
        Color.Light     => "btn-light",
        Color.Dark      => "btn-dark",
        _               => "btn-primary"
    };

    private async Task OnClickEvent(MouseEventArgs args)
    {
        if (!Disabled && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }
}