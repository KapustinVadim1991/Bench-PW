@using WebComponents.Utility
@namespace WebComponents.Components
<button type="@ButtonType" class="btn btn-primary loading-button" disabled="@Disabled">
    <span class="btn-content @LoaderVisibleClass">
        <span class="btn-text">@Text</span>
        @if (IsLoading)
        {
            <div class="loader"></div>
        }
    </span>
</button>

@code {
    private string LoaderVisibleClass => new CssBuilder()
        .AddClass("loader-visible", _animateLoader)
        .Build();

    [Parameter] public bool IsLoading { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string ButtonType { get; set; } = "button";
    [Parameter] public string? Text { get; set; }

    private bool _animateLoader = false;

    protected override void OnParametersSet()
    {
        if (!IsLoading)
        {
            _animateLoader = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if IsLoading equals true, but animation hasn't started yet,
        // waiting for one tick until the element appears in the DOM,
        // set animateLoader flag after that, to add class "visible"
        if (IsLoading && !_animateLoader)
        {
            await Task.Yield();
            _animateLoader = true;
            StateHasChanged();
        }
    }

}