@using WebComponents.Enums
@using WebComponents.Utility
@namespace WebComponents.Components

<button type="@ButtonType" class="@BtnClass" @onclick="OnClickEvent" disabled="@(Disabled || _isOperationInProcess)">
    <span class="btn-content @LoaderVisibleClass">
        <span class="btn-text">@Text</span>
        @if (_isOperationInProcess)
        {
            <div class="loader"></div>
        }
    </span>
</button>

@code {
    private bool _animateLoader;
    private bool _isOperationInProcess;

    private string LoaderVisibleClass => new CssBuilder()
        .AddClass("loader-visible", _animateLoader)
        .Build();

    private string BtnClass => new CssBuilder("btn")
        .AddClass(ColorClass)
        .AddClass(Class!, !string.IsNullOrEmpty(Class))
        .Build();

    [Parameter] public bool UseLoader { get; set; }
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public string ButtonType { get; set; } = "button";
    [Parameter] public string? Text { get; set; }
    [Parameter] public string? Class { get; set; }
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }

    [Parameter] public Color Color { get; set; } = Color.Primary;

    private string ColorClass => Color switch {
        Color.Primary   => "btn-primary",
        Color.Secondary => "btn-secondary",
        Color.Success   => "btn-success",
        Color.Danger    => "btn-danger",
        Color.Warning   => "btn-warning",
        Color.Info      => "btn-info",
        Color.Light     => "btn-light",
        Color.Dark      => "btn-dark",
        _               => "btn-primary"
    };

    protected override void OnParametersSet()
    {
        if (!_isOperationInProcess)
        {
            _animateLoader = false;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        // if IsLoading equals true, but animation hasn't started yet,
        // waiting for one tick until the element appears in the DOM,
        // set animateLoader flag after that, to add class "visible"
        if (_isOperationInProcess && !_animateLoader)
        {
            await Task.Yield();
            _animateLoader = true;
            StateHasChanged();
        }
    }

    private async Task OnClickEvent(MouseEventArgs args)
    {
        if (!Disabled && OnClick.HasDelegate)
        {
            if (UseLoader)
            {
                _isOperationInProcess = true;
                StateHasChanged();
                await OnClick.InvokeAsync();
                _isOperationInProcess = false;
            }
            else
            {
                await OnClick.InvokeAsync();
            }
        }
    }
}