@page "/register"
@using System.ComponentModel.DataAnnotations
@using Client.Identity
@using Client.Identity.Models
@inject IAccountManagement AccountManagement
@inject NavigationManager Navigation
@layout EmptyLayout

<article class="container flex-center h-100dvh gap-5 col-sm">
    <LogoSection/>
    <section id="form-section" class="w-100">
        <EditForm @ref="_form" Model="Input" OnValidSubmit="RegisterUserAsync">
            <DataAnnotationsValidator/>

            <LabeledInput Label="Name"
                          InputId="Input.Name"
                          @bind-Value="@Input.Name"
                          AutoComplete="username"
                          Placeholder="John Smith"
                          For="() => Input.Name"/>

            <LabeledInput Label="Email"
                          InputId="Input.Email"
                          @bind-Value="@Input.Email"
                          AutoComplete="username"
                          Placeholder="name@example.com"
                          For="() => Input.Email"/>

            <LabeledInput Label="Password"
                          InputId="Input.Password"
                          InputType="password"
                          @bind-Value="@Input.Password"
                          Placeholder="Enter your password"
                          For="() => Input.Password"/>

            <LabeledInput Label="Confirm password"
                          InputId="Input.ConfirmPassword"
                          InputType="password"
                          @bind-Value="@Input.ConfirmPassword"
                          Placeholder="Confirm the password"
                          For="() => Input.ConfirmPassword"/>

            @foreach (var error in _formResult.ErrorList)
            {
                <div class="invalid_validation_message">@error</div>
            }

            <Button UseLoader OnClick="RegisterUserAsync"
                    Color="Color.Secondary"
                    Text="Register"
                    Class="mt-1 w-100"/>
        </EditForm>
    </section>
</article>

@code {
    private EditForm _form = null!;
    private FormResult _formResult = new();

    [SupplyParameterFromForm] private InputModel Input { get; set; } = new();

    public async Task RegisterUserAsync()
    {
        if (_form.EditContext?.Validate() != true)
        {
            return;
        }

        _formResult = await AccountManagement.RegisterAsync(Input.Name, Input.Email, Input.Password);
        if (_formResult.Succeeded)
        {
            _formResult = await AccountManagement.LoginAsync(Input.Email, Input.Password);
            if (_formResult.Succeeded)
            {
                Navigation.NavigateTo("/");
            }
        }
    }

    public sealed class InputModel
    {
        [Required]
        [RegularExpression(
            "^(?=.{2,100}$)(?!.*[.,]{2,})(?=.*\\p{L})[\\p{L}\\p{M}.,]+(?: [\\p{L}\\p{M}.,]+)*$",
            ErrorMessage = "The provided name is invalid. It must consist solely of letters (from any language), may include single commas or periods (without consecutive punctuation), and spaces. Please ensure the name is between 2 and 100 characters long.")]
        [Display(Name = "Name")]
        public string Name { get; set; } = string.Empty;

        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Compare("Password")]
        [Display(Name = "Confirm Password")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

}