@page "/login"
@using System.ComponentModel.DataAnnotations
@using Client.Identity
@using Client.Identity.Models
@inject IAccountManagement Acct
@inject NavigationManager Navigation
@layout EmptyLayout

<article class="container flex-center h-100dvh gap-5 col-sm">
    <LogoSection/>
    <section id="form-section" class="w-100">
        <EditForm @ref="_form" Model="Input" OnValidSubmit="LoginUserAsync">
            <DataAnnotationsValidator/>

            <LabeledInput Label="Email"
                          InputId="Input.Email"
                          @bind-Value="@Input.Email"
                          AutoComplete="username"
                          Placeholder="name@example.com"
                          For="() => Input.Email"/>

            <LabeledInput Label="Password"
                          InputId="Input.Password"
                          InputType="password"
                          @bind-Value="@Input.Password"
                          AutoComplete="current-password"
                          Placeholder="Enter your password"
                          For="() => Input.Password"/>

            @foreach (var error in _formResult.ErrorList)
            {
                <div class="invalid_validation_message">@error</div>
            }

            <div class="btn-vertical-group mt-1">
                <Button UseLoader
                        OnClick="LoginUserAsync"
                        Text="Log in" />

                <Button OnClick="NavigateToRegistration" Color="Color.Secondary" Text="Registration"/>
            </div>
        </EditForm>
    </section>
</article>


@code {
    private EditForm _form = null!;
    private FormResult _formResult = new();
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery] private string? ReturnUrl { get; set; }

    public async Task LoginUserAsync()
    {
        if (_form.EditContext?.Validate() != true)
        {
            return;
        }

        await Task.Delay(1000); // just to show the loader on the button
        _formResult = await Acct.LoginAsync(Input.Email, Input.Password);

        if (_formResult.Succeeded)
        {
            Navigation.NavigateTo(ReturnUrl ?? "/");
        }
    }

    private void NavigateToRegistration()
    {
        Navigation.NavigateTo("register");
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;
    }
}